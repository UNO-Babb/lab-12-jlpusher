Name:Jessica Pusher

Number of elements: 10000

Bubble Sort
Ordered list time: 2.58144 seconds
Reversed list time: 5.96247 seconds
Random list time: 4.58473 seconds

Bubble Sort Early Exit
Ordered list time: 0.00051 seconds
Reversed list time: 5.84565 seconds
Random list time: 4.48700 seconds

Selection Sort
Ordered list time: 2.02348 seconds
Reversed list time: 1.87913 seconds
Random list time: 1.89518 seconds

Insertion Sort
Ordered list time: 0.00090 seconds
Reversed list time: 3.76115 seconds
Random list time: 1.92642 seconds

Merge Sort
Ordered list time: 0.01632 seconds
Reversed list time: 0.01695 seconds
Random list time: 0.02186 seconds

Questions to answer:
1) What was the worst case scenario for any sorting technique?


2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?


3) Why was merge sort so much more efficient?


4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?


5) What issues can you see with a recursive sorting technique like merge sort?
